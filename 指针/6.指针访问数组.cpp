#include <iostream>
using namespace std;

int main()
{
	int a[5] = { 1,2,3,4,5 };
	// 数组名是数组的地址(数组的地址是第一个元素的地址)
	cout << "a:" << a << endl ;         //a:000000CAF216F6F8
	cout << "&a[0]:" << &a[0] << endl;  //&a[0]:000000CAF216F6F8

	char c[] = "Hello";
	cout << "c:" << c <<  "  &c[0]:" << &c[0] << endl;  //c:Hello  &c[0]:Hello
	// 需要通过cout输出char型指针的地址时，需要转换成其他指针类型
	cout << "(int*)c:" << (int*)c << "  (bool*)&c[0]:" << (bool*)&c[0] << endl; 
	// 输入内容：(int*)c:0000003967EFF704  (bool*)&c[0]:0000003967EFF704
	
	// 获取字符数组c第一个元素的地址
	cout << "c+1:" << c + 1 << "  &c[1]: "<< & c[1] << endl;  // c+1:ello  &c[1]: ello
	// 获取字符数组c第一个元素的值
	cout << "*(c+1):" << *(c + 1) << "  c[1]:" << c[1] << endl;  // *(c+1):e  c[1]:e

	int* p = a;
	// 通过指针算术运算和解引用方式获取数组元素的值
	for (int i = 0; i < 5; i++)
	{
		cout << *(p + i) << " ";   // 1 2 3 4 5
	}
	cout << endl;

	// 通过[下标]方式获取数组元素的值，这里[]就相当于运算符。
	for (int i = 0; i < 5; i++)
	{
		cout << p[i] << " ";   // 1 2 3 4 5
	}
	cout << endl;

	// [] 可以看作是一个运算符，具体加多少减多少要看数组的大小，c++不会报错
	// 指针不是指问数组第一个元素时，[] 中不是下标。数组名上使用[]，任何时候都是下标。
	int a[5] = { 1,2,3,4,5 };
	int* p = a;
	p = &a[2];   // 指针指向数组a第3个元素
	// 通过指针p访问数组a第4个元素
	cout << "p[1]:" << p[1] << "  *(p+1):" << *(p + 1) << endl; //p[1]:4  *(p+1):4
	// 通过指针p访问数组a第2个元素
	cout << "p[-1]:" << p[-1] << "  *(p-1):" << *(p - 1) << endl; //p[1]:2  *(p+1):2

	cout << endl;
	return 0;
}